from Crypto.Util.number import isPrime
from collections import Counter

p = 2906347176960734841102915400715931684676738386917551293602548940017089151563020096075793145507544909799419325859795323626093294797601295362066222447438952667031315410724883975028255045041250967003021649815634917672723512152046317329813204370731220675839985347995496026203846545595056245788546987335750260208358284546291147473293252515791139722473131884086360496749320657551127839785289082610236625397838417994044140052064528157551457620578232391435991791325758463549417841949376589453031999388696831078873411074599909633778369511252614215116845902011637486786496344033030211520607498474074348716583103427724802387789604245206457732417620741922128269046960386975413294794633781512968490642838333805952796503387711844405306514987765843460355064766744241388139564882514479660485760706796398091343123973467734371818224366218814091320885248000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001
g = 164521871238889582024066930477752338426127039484870634687372976303994889196659547229587164462602702965202312947499302779386907935421310714798021314266879247271710738613127706897848730631917585395791619192276833925573086804898391668165568146824425334480004063308949022072410083655463742831092051251101155152531480853070844833042223936644655292633213132146200999426953060317569634996862288762520863609142363957818445852583593477363759257091204699322538979960971618732867721744779855659735386581660251790237818341517848057855297757119253531576071106092087779288540111603460939574602309035260760391575228076175710949334157638642644911181186271829629938186003286533533836348815829064327051735785755530846581382670936705392682903040830418516068037993525611905605665647580836378992233409147550706449953168440968842541928672516101726494018766209597859180200593207995545647331014031766361254075195777786984497911304009666583478015338492069245297083
pub = 88582506867966561520025928134539363743041386671384088158385236355325920750392655005261817111300895093220372044893541001764732845652267167601182292361587079264404826769162012995535033840772118705469205653179875519620639851997612497764672570348520973185014627528311821646601693465992586978533636461157119125443582361006226578651221850427706893495141159462514236962941252085132279779249216772812345459555925890356402696266550545002178376667668994892536258173387001789433772868042396288706676037928532246565149144545350920683923192609379847874122209445548532718927917195858851820816512713251880505823119699703550691292273585327585933143568849394618505972290844996506623304110285301526004463771448869915206595965675977290497349635107560394009008627578708418893021779164806316134070911372651382384229839508974155715491037970507277731094634390904993691380116879452467352835389983257395127882704828441432651553865778364955064252188159136062519451

for d in range(1,715517):
    if pow(pub,d, p) == 1:
        break
print(d)
#101

primes = []
for y in range(2,1000):  
    if isPrime(y):
       primes.append(y)

p1 = p-1
divisors = []

while p1 > 1:
    for x in primes:
        while p1%x == 0:
            divisors.append(x)
            p1=p1//x
    
print(Counter(divisors))

print(p.bit_length())
#3121